#+TITLE: r llyful Emacs Config
#+AUTHOR: Billy Merchan
#+DESCRIPTION: My personal Emacs config
#+STARTUP: showeverything
#+OPTIONS: toc: 2

* Table of Contents :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#zoom-keybind][Zoom Keybind]]
  - [[#move-window-functions][Move window functions]]
  - [[#general-keybindings][General Keybindings]]
  - [[#all-the-icons][All the Icons]]
  - [[#fonts][Fonts]]
- [[#gui-tweaks][GUI TWEAKS]]
  - [[#trying-out-org-modern-configs][Trying out Org-Modern configs]]
  - [[#disable-menu-bar-tool-bar-scroll-bar][Disable menu bar, tool bar, scroll bar]]
  - [[#display-line-numbers-truncated-lines][Display line numbers, truncated lines]]
  - [[#org-bullet-points-and-titles][Org Bullet Points and Titles]]
  - [[#table-of-contents-for-org][Table of contents for Org]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#org-tempo][Org Tempo]]
- [[#themes][Themes]]
- [[#which-key][WHICH KEY]]
- [[#ivy-and-counsel][Ivy and Counsel]]
- [[#shells-and-terminals][Shells and Terminals]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-toggle]]

* IMPORTANT PROGRAMS TO LOAD FIRST

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.config/emacs/elpa/org-superstar-1.5.1/")
#+end_src
** Elpaca Package Manager

#+begin_src emacs-lisp


(defvar elpaca-installer-version 0.7)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                 ,@(when-let ((depth (plist-get order :depth)))
                                                     (list (format "--depth=%d" depth) "--no-single-branch"))
                                                 ,(plist-get order :repo) ,repo))))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
  


(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)
#+end_src

** Load Evil Mode

#+begin_src emacs-lisp
	  ;; Install a package via the elpaca macro
	  ;; See the "recipes" section of the manual for more details.

	  ;; (elpaca example-package)

	  ;; Install use-package support
	  (elpaca elpaca-use-package
	    ;; Enable use-package :ensure support for Elpaca.
	    (elpaca-use-package-mode))

	  ;;When installing a package which modifies a form used at the top-level
	  ;;(e.g. a package which adds a use-package key word),
	  ;;use the :wait recipe keyword to block until that package has been installed/configured.
	  ;;For example:
	  ;;(use-package general :ensure (:wait t) :demand t)

	  ;; Expands to: (elpaca evil (use-package evil :demand t))
    ;  (use-package evil :ensure t :demand t)

	  (use-package evil
	   :init                   ;; evil tweaks before loading
	    (setq evil-want-integration t)
	    (setq evil-want-keybinding nil)
	    (setq evil-vsplit-window-right t)
	    (setq evil-split-window-below t)
	    (evil-mode)
	    :ensure t
	    :demand t
	   )


	(use-package evil-collection
	    :after evil
	    :ensure t
	    :config
	    (evil-collection-init)
        )


	  ;;Turns off elpaca-use-package-mode current declaration
	  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
	  ;;Useful for configuring built-in emacs features.
	  (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))
#+end_src

** Zoom Keybind
#+begin_src emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

#+end_src


** Move window functions
#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
"Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

#+end_src

** General Keybindings
#+begin_src emacs-lisp
  ;; get rid of key sequence starts with non-prefix key errors
  (use-package general
      :config
      (general-auto-unbind-keys)
      (general-evil-setup)
      ;; set up 'SPC' as global leader key
      (general-create-definer bh/leader-keys
        :states '(normal insert visual emacs)
        :keymaps 'override
        :prefix "SPC" ;; set leader
        :global-prefix "M-SPC" ;; access leader while in insert mode
      )
      ;; General important functions
      (bh/leader-keys
        "." '(find-file :wk "Find file")
        "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
        "f r" '(counsel-recentf :wk "Find recent files") 
        "TAB TAB" '(comment-line :wk "Comment Lines")
        "h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config")
      )
      ;; Buffer functions
      (bh/leader-keys
        "b" '(:ignore t :wk "buffer")
        "bb" '(switch-to-buffer :wk "Switch buffer")
        "bk" '(kill-this-buffer :wk "Kill this buffer")
        "bn" '(next-buffer :wk "Next buffer")
        "bp" '(previous-buffer :wk "Previous buffer")
        "br" '(revert-buffer :wk "Reload buffer")
      )
      ;; Help functions
      (bh/leader-keys
        "h" '(:ignore t :wk "Help")
        "h f" '(describe-function :wk "Describe function")
        "h v" '(describe-variable :wk "Describe variabe")
       )
       ;; Toggle functions
       (bh/leader-keys
         "t" '(:ignore t :wk "Toggle")
         "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
         "t t" '(display-line-numbers-mode :wk "Toggle truncated lines")
         "t v" '(vterm-toggle :wk "Toggle vterm")
       )
       ;; Window functions
        (bh/leader-keys
          "w" '(:ignore t :wk "Windows")
          ;; Window spits
          "w c" '(evil-window-delete :wk "Close window")
          "w n" '(evil-window-new :wk "New window")
          "w s" '(evil-window-split :wk "Horizontal split window")
          "w v" '(evil-window-vsplit :wk "Vertical split window")
          ;; Window focus movement
          "w h" '(evil-window-left :wk "Window left")
          "w j" '(evil-window-down :wk "Window down")
          "w k" '(evil-window-up :wk "Window up")
          "w l" '(evil-window-right :wk "Window right")
          "w w" '(evil-window-next :wk "Goto next window")
          ;; Move windows
          "w H" '(buf-move-left :wk "Buffer move left")
          "w J" '(buf-move-down :wk "Buffer move down")
          "w K" '(buf-move-up :wk "Buffer move up")
          "w L" '(buf-move-right :wk "Buffer move right")
          )
      ;; Eshell functions
        (bh/leader-keys
          "e" '(ignore t :wk "Eshell/Evaluate")
          ;; Eval
          "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
          "e r" '(eval-region :wk "Evaluate elisp in region")
          ;; Eshell
          "e s" '(eshell :wk "Eshell")
          "e h" '(counsel-esh-history :which-key "Eshell history")
        )
      :ensure t
    )
#+end_src

** All the Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p)
  )
  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t )))
  )
#+end_src

** Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "DejaVu Sans Mono"
    :height 110
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "Ubuntu"
    :height 120
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "DejaVu Sans Mono"
    :height 110
    :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)
  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))
  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)

#+end_src

* GUI TWEAKS
Misc settings to make Emacs look sleeker

** Trying out Org-Modern configs
#+begin_src emacs-lisp
  (setq 
    org-modern-star "replace"
    org-modern-replace-stars "◉◈◈○▷"
  )
#+end_src


** Disable menu bar, tool bar, scroll bar
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display line numbers, truncated lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src

** Org Bullet Points and Titles
#+begin_src emacs-lisp
  (require 'org-superstar)
  (setq org-hidden-keywords '(title))
  ;; setting title font
  (set-face-attribute 'org-level-8 nil :weight 'bold :inherit 'default)
  ;; no scaling for lower levels
  (set-face-attribute 'org-level-7 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-6 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-5 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-4 nil :inherit 'org-level-8)
  ;; scaling for top levels
  (set-face-attribute 'org-level-3 nil :inherit 'org-level-8 :height 1.2) ;\large
  (set-face-attribute 'org-level-2 nil :inherit 'org-level-8 :height 1.44) ;\Large
  (set-face-attribute 'org-level-1 nil :inherit 'org-level-8 :height 1.728) ;\LARGE
  ;; bullet point styling
  ;; changing icons
  (setq org-superstar-headline-bullets-list
      '("◉" ("◈" ?◈) "○" "▷"))
  ;; only using first 4 styles, not cycling
  (setq org-cycle-level-faces nil)
  (setq org-n-level-faces 4)
  ;; Hide away leading stars on terminal.
  (setq org-superstar-leading-fallback ?\s)
  (setq org-hide-leading-stars t)
  ;; increase indent width
  ;;(setq org-list-indent-offset 400)
  ;; document title setting to huge
  (set-face-attribute 'org-document-title nil
		    :height 2.074
		    :foreground 'unspecified
		    :inherit 'org-level-8)
  ;; auto start
  (add-hook 'org-mode-hook
  (lambda ()
  (org-superstar-mode 1)))
#+end_src
#+STARTUP: indent

** Table of contents for Org
#+begin_src emacs-lisp
    (use-package toc-org
      :commands toc-org-enable
      :init (add-hook 'org-mode-hook 'toc-org-enable)
      :ensure t
  )
#+end_src
** Disable Electric Indent
#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src
** Org Tempo
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

* Themes
#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")
  (load-theme 'catppuccin t)
#+end_src

* WHICH KEY
#+begin_src emacs-lisp
	(use-package which-key
	:init
	  (which-key-mode 1)
	:config
	(setq
	   which-key-side-window-location 'bottom
	   which-key-sort-order #'which-key-key-order-alpha
	   which-key-sort-uppercase-first nil
	   which-key-add-column-padding 1
	   which-key-max-display-columns nil
	   which-key-min-display-lines 6
	   which-key-side-window-slot -10
	   which-key-side-window-max-height 0.25
	   which-key-idle-delay 0.8
	   which-key-max-description-length 25
	   which-key-allow-imprecise-window-fit t
	   which-key-separator " → " )
  :ensure t
  )
#+end_src
* Ivy and Counsel
> generic auto complete for emacs
#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :config (counsel-mode)
    :ensure t
  )

  (use-package ivy
    :bind
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-windows)
    )
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config 
    (ivy-mode)
  )

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1)
  )

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode) ;; Descriptions in M-x
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev
    )
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer)
    )

#+end_src

* Shells and Terminals
** Eshell
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1)
  :ensure t
  )

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "htop" "ssh" "top" "zsh")
)
#+end_src
** Vterm
#+begin_src emacs-lisp
  (use-package vterm
  :ensure t
  :config
  (setq shell-file-name "/bin/zsh"
  vterm-max-scrollback 5000)
  )
#+end_src
** Vterm-toggle
#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
    '((lambda (buffer-or-name _)
        (let ((buffer (get-buffer buffer-or-name)))
           (with-current-buffer buffer
               (or (equal major-mode 'vterm-mode)
                   (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
    (display-buffer-reuse-window display-buffer-at-bottom)
    (reusable-frames . visible)
    (window-height . 24)))
:ensure t
)

#+end_src
